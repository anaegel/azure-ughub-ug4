# Starter pipeline
# https://aka.ms/yaml

trigger:
- master

variables:
  MY_CC: '/usr/bin/clang'
  MY_CXX: '/usr/bin/clang'


stages:
- stage: UGHubInstall
  displayName: 'UG4 via ughub:'
  jobs: 
  - job: APTList
    steps:
    - script: apt-cache search .
    - script: sudo apt install mpich
    - script: apt-cache search .
     
  - job: UGCompile
    displayName: 'Compiling'
    dependsOn: UGHubDownload
    strategy:
      matrix:
        linux-clang:
          imageName: "ubuntu-latest"
          cxxCompiler: '/usr/bin/clang++'
          ccCompiler: '/usr/bin/clang'
          buildName: 'build-linux-clang'
          CMakeArgs: '-DPARALLEL=OFF'
        linux-clang-mpi:
          imageName: "ubuntu-latest"
          cxxCompiler: '/usr/bin/mpic++-mpich-clang'
          ccCompiler: '/usr/bin/mpicc-mpich-clang'
          buildName: 'build-linux-clang-mpi'
          CMakeArgs: ''
        linux-gnu:
          imageName: "ubuntu-latest"
          cxxCompiler: '/usr/bin/g++'
          ccCompiler: '/usr/bin/gcc'
          buildName: 'build-linux-gcc'
          CMakeArgs: '-DPARALLEL=OFF'
        linux-gnu-mpic:
          imageName: "ubuntu-latest"
          cxxCompiler: '/usr/bin/mpic++-mpich-gcc'
          ccCompiler: '/usr/bin/mpicc-mpich-gcc'
          buildName: 'build-linux-gcc'
          CMakeArgs: '-DPARALLEL=OFF'
        mac-clang:
          imageName: "macos-10.13"
          cxxCompiler: '/usr/bin/clang++'
          ccCompiler: '/usr/bin/clang'
          buildName: 'build-mac-clang'
          CMakeArgs: '-DPARALLEL=OFF'
      maxParallel: 6
    pool:
      vmImage: $(imageName)
    timeoutInMinutes: 300   
    steps:
    - script: |
        mkdir "$(System.DefaultWorkingDirectory)/ug4-clone"; 
        cd "$(System.DefaultWorkingDirectory)/ug4-clone";
        git clone https://www.github.com/UG4/ughub
        echo Installed 'ughub'.
        export UG4_FOLDER_SURVIVED_CACHE=false
        if [ -e ug4 ]; then export UG4_FOLDER_SURVIVED_CACHE=true; fi
        if [[ "$UG4_FOLDER_SURVIVED_CACHE" == "false" ]]; then mkdir ug4; fi
        cd ug4
        if [[ "$UG4_FOLDER_SURVIVED_CACHE" == "false" ]]; then ../ughub/ughub init .; fi
        if [[ "$UG4_FOLDER_SURVIVED_CACHE" == "false" ]]; then ../ughub/ughub install ugcore; fi
        if [[ "$UG4_FOLDER_SURVIVED_CACHE" == "false" ]]; then rm -rf ugcore; fi
        ../ughub/ughub install ConvectionDiffusion
        echo "Installed UG4 via ughub"
        
    - script: |
        cd "$(System.DefaultWorkingDirectory)/ug4-clone/ug4";
        mkdir $(buildName); cd $(buildName)
        ls -l ..;
        cmake .. -DCMAKE_CXX_COMPILER"=$(cxxCompiler)" -DCMAKE_C_COMPILER="$(ccCompiler)" -DConvectionDiffusion=ON $(CMakeArgs)
        
    - script: |
        cd "$(System.DefaultWorkingDirectory)/ug4-clone/ug4";
        ls -l
        cd $(buildName)
        make -j 10;
  
  
  
- stage: SecondStage
  displayName: 'Compile UG4'
  dependsOn: UGHubInstall
  jobs: 
  - job: UGCompile
    steps:
    - script: ls -l
     
    
 
 
